cmake_minimum_required(VERSION 3.14)

include(CMakeDependentOption)

project(ErasureBenchmarks)

add_executable(ErasureBenchmarks main.cpp)
option(USE_CONAN "Skip building with Conan" ON)
option(NO_SELECTOR "Don't use selectors to give each test their own copy of the functions and classes." OFF)
option(CONST_VALUES "Make the objects we are erasing and the wrappers const." ON)
option(SKIP_FINAL_VIRTUAL "Skip testing with a final version of the AImpl(AImplFinal) class." OFF)
option(SKIP_NONFINAL_VIRTUAL "Skip testing with a non-final version of the AImpl class." OFF)
option(SKIP_UNSAFE_TESTS "Skip the tests which more heavily delve into UB. They do not work with MSVC" ON)
option(SKIP_CREATE_INTERFACE_IMPL "Skip the implementation that creates a subclass of the interface." OFF)
option(SKIP_CAPTURING_LAMBDA "Skip the implementation that uses capturing lambdas." OFF)
option(SKIP_MEMBER_PTR "Skip the implementation that calls with member function pointers." OFF)
option(SKIP_STD_VARIANT "Skip the implementation that uses std::variant." OFF)
option(NO_INLINE_CALL_MEMBER "Prevent inline of callMember. Should only be used to generate nicer assembly." OFF)

cmake_dependent_option(USE_GOOGLE_BENCH "Use Google Benchmark for running tests" ON "USE_CONAN" OFF)
cmake_dependent_option(SKIP_DYNO "Skip the implementation that uses dyno." OFF
                       "USE_CONAN" ON)
cmake_dependent_option(SKIP_FOLLY_POLY "Skip the implementation that use folly::poly." ON
                       "USE_CONAN" ON)
cmake_dependent_option(SKIP_MPARK_VARIANT "Skip the implementation that use mpark/variant." OFF
                       "USE_CONAN" ON)
cmake_dependent_option(SKIP_UNSAFE_MEMBER_PTR_CAST "Skip the implementation that does unsafe member ptr casts." OFF
                       "NOT SKIP_UNSAFE_TESTS" ON)
cmake_dependent_option(SKIP_UNSAFE_FUNC_PTR_CAST "Skip the implementation that does unsafe function ptr casts." OFF
                       "NOT SKIP_UNSAFE_TESTS" ON)
cmake_dependent_option(SKIP_INTERFACE_REFERENCE "Skip the inheritance reference tests" OFF
                       "NOT SKIP_FINAL_VIRTUAL;NOT SKIP_NONFINAL_VIRTUAL" ON)
cmake_dependent_option(SKIP_POLYMORPHIC_VALUE "Skip the implementation that uses a custom polymorphic_value that always allocates on the stack." OFF
                       "NOT SKIP_FINAL_VIRTUAL;NOT SKIP_NONFINAL_VIRTUAL" ON)
cmake_dependent_option(SKIP_TIMING "Don't time the test run, should only be used if needing to look at the assembly" OFF
                       "NOT GOOGLE_BENCH" OFF)

set(BUILD_FROM_SOURCE "" CACHE STRING "Build these packages from source, very time intensive. Can use all to make it build all from source.")
set(OPTIMIZATION_LEVEL "Full" CACHE STRING "The default optimization level that the compiler will be allowed to do.")
set_property(CACHE OPTIMIZATION_LEVEL PROPERTY STRINGS None NoOptimizeMembers NoInlineMembers NoSelectors NoOptimizeRunTest Full)
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    if(NOT SKIP_UNSAFE_TESTS)
        message(WARNING "You cannot run the unsafe tests with MSVC, they will do bad things. Enabling SKIP_UNSAFE_TESTS.")
        set(SKIP_UNSAFE_TESTS ON CACHE INTERNAL "Cannot be used with MSVC")
    endif()
    if(NOT SKIP_DYNO)
        message(WARNING "Dyno does not support MSVC due to errors in their C++14 support. Enabling SKIP_DYNO.")
        set(SKIP_DYNO ON CACHE INTERNAL "Cannot be used with MSVC")
    endif()
endif()

target_compile_features(ErasureBenchmarks PUBLIC cxx_std_17)

string( TOLOWER "${CMAKE_BUILD_TYPE}" cmake_build_type_lower)
if(cmake_build_type_lower STREQUAL "Release")
    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
        target_compile_options(ErasureBenchmarks PUBLIC /O2)
        set_property(TARGET ErasureBenchmarks PROPERTY
                MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>DLL")
        set_property(TARGET ErasureBenchmarks )
    else()
        target_compile_options(ErasureBenchmarks PUBLIC -march=native -Ofast -masm=intel -fverbose-asm)
    endif()
endif()

if(NO_SELECTOR)
    target_compile_definitions(ErasureBenchmarks PUBLIC NO_SELECTOR)
endif()
if(CONST_VALUES)
    target_compile_definitions(ErasureBenchmarks PUBLIC CONST_VALUES)
endif()
if(NOT SKIP_FINAL_VIRTUAL)
    target_compile_definitions(ErasureBenchmarks PUBLIC FINAL_VIRTUAL)
endif()
if(NOT SKIP_NONFINAL_VIRTUAL)
    target_compile_definitions(ErasureBenchmarks PUBLIC NONFINAL_VIRTUAL)
endif()
if(NOT SKIP_CREATE_INTERFACE_IMPL)
    target_compile_definitions(ErasureBenchmarks PUBLIC CREATE_INTERFACE_IMPL)
endif()
if(NOT SKIP_CAPTURING_LAMBDA)
    target_compile_definitions(ErasureBenchmarks PUBLIC CAPTURING_LAMBDA)
endif()
if(NOT SKIP_MEMBER_PTR)
    target_compile_definitions(ErasureBenchmarks PUBLIC MEMBER_PTR)
endif()
if(NOT SKIP_STD_VARIANT)
    target_compile_definitions(ErasureBenchmarks PUBLIC STD_VARIANT)
endif()
if(USE_GOOGLE_BENCH)
    target_compile_definitions(ErasureBenchmarks PUBLIC GOOGLE_BENCH)
endif()
if(NOT SKIP_DYNO)
    target_compile_definitions(ErasureBenchmarks PUBLIC DYNO)
endif()
if(NOT SKIP_BOOST_TE)
    target_compile_definitions(ErasureBenchmarks PUBLIC BOOST_TE)
endif()
if(NOT SKIP_FOLLY_POLY)
    target_compile_definitions(ErasureBenchmarks PUBLIC FOLLY_POLY)
endif()
if(NOT SKIP_MPARK_VARIANT)
    target_compile_definitions(ErasureBenchmarks PUBLIC MPARK_VARIANT)
endif()
if(NOT SKIP_UNSAFE_MEMBER_PTR_CAST)
    target_compile_definitions(ErasureBenchmarks PUBLIC UNSAFE_MEMBER_PTR_CAST)
endif()
if(NOT SKIP_UNSAFE_FUNC_PTR_CAST)
    target_compile_definitions(ErasureBenchmarks PUBLIC UNSAFE_FUNC_PTR_CAST)
endif()
if(NOT SKIP_INTERFACE_REFERENCE)
    target_compile_definitions(ErasureBenchmarks PUBLIC INTERFACE_REFERENCE)
endif()
if(NOT SKIP_INTERFACE_REFERENCE_BUFFER)
    target_compile_definitions(ErasureBenchmarks PUBLIC INTERFACE_REFERENCE_BUFFER)
endif()
if(NOT SKIP_POLYMORPHIC_VALUE)
    target_compile_definitions(ErasureBenchmarks PUBLIC POLYMORPHIC_VALUE)
endif()
if(NOT SKIP_TIMING)
    target_compile_definitions(ErasureBenchmarks PUBLIC MANUAL_BENCH)
endif()
if(NO_INLINE_CALL_MEMBER)
    target_compile_definitions(ErasureBenchmarks PUBLIC NO_INLINE_CALL_MEMBER)
endif()
if("${OPTIMIZATION_LEVEL}" STREQUAL "None")
    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
        target_compile_options(ErasureBenchmarks PUBLIC /Od)
    else()
        target_compile_options(ErasureBenchmarks PUBLIC -O0)
    endif()
    target_compile_definitions(ErasureBenchmarks PUBLIC NO_OPTIMIZE_MEMBERS NO_INLINE_MEMBERS
                                                        NO_OPTIMIZE_RUNTEST NO_INLINE_CALL_MEMBER
                                                        NO_SELECTOR)
endif()
if("${OPTIMIZATION_LEVEL}" STREQUAL "NoOptimizeMembers")
    target_compile_definitions(ErasureBenchmarks PUBLIC NO_OPTIMIZE_MEMBERS NO_INLINE_MEMBERS
                                                        NO_OPTIMIZE_RUNTEST NO_SELECTOR)
endif()
if("${OPTIMIZATION_LEVEL}" STREQUAL "NoInlineMembers")
    target_compile_definitions(ErasureBenchmarks PUBLIC NO_INLINE_MEMBERS NO_OPTIMIZE_RUNTEST
                                                        NO_SELECTOR)
endif()
if("${OPTIMIZATION_LEVEL}" STREQUAL "NoSelector")
    target_compile_definitions(ErasureBenchmarks PUBLIC NO_OPTIMIZE_RUNTEST NO_SELECTOR)
endif()
if("${OPTIMIZATION_LEVEL}" STREQUAL "NoOptimizeRunTest")
    target_compile_definitions(ErasureBenchmarks PUBLIC NO_OPTIMIZE_RUNTEST)
endif()

if(USE_CONAN)
    # Download automatically, you can also just copy the conan.cmake file
    if(NOT EXISTS "${CMAKE_BINARY_DIR}/conan.cmake")
        message(STATUS "Downloading conan.cmake from https://github.com/conan-io/cmake-conan")
        file(DOWNLOAD "https://raw.githubusercontent.com/conan-io/cmake-conan/master/conan.cmake"
                "${CMAKE_BINARY_DIR}/conan.cmake")
    endif()

    include(${CMAKE_BINARY_DIR}/conan.cmake)

    conan_check(REQUIRED)
    if(DEFINED CONAN_COMMAND)
        set(GLOBAL PROPERTY CONAN_CMD "${CONAN_COMMAND}")
    endif()

    conan_add_remote(NAME bincrafters URL https://api.bintray.com/conan/bincrafters/public-conan)
    conan_add_remote(NAME lawrencem URL https://api.bintray.com/conan/lawrencem99/lm)
    conan_add_remote(NAME onebaseroach URL  https://api.bintray.com/conan/y4n9squared/onebaseroach)

    set(ERASURE_REQUIRE_CONAN_LIBS "")
    set(ERASURE_LINK_CONAN_LIBS "")

    if(NOT SKIP_DYNO)
        list(APPEND ERASURE_REQUIRE_CONAN_LIBS "dyno/0.1@lawrencem/stable")
        list(APPEND ERASURE_LINK_CONAN_LIBS "CONAN_PKG::dyno")
    endif()
    if(NOT SKIP_FOLLY_POLY)
        list(APPEND ERASURE_REQUIRE_CONAN_LIBS "folly/2018.11.12.00@bincrafters/stable")
        list(APPEND ERASURE_LINK_CONAN_LIBS "CONAN_PKG::folly")
    endif()
    if(NOT SKIP_MPARK_VARIANT)
        list(APPEND ERASURE_REQUIRE_CONAN_LIBS "variant/1.3.0@bincrafters/stable")
        list(APPEND ERASURE_LINK_CONAN_LIBS "CONAN_PKG::variant")
    endif()
    if(USE_GOOGLE_BENCH)
        list(APPEND ERASURE_REQUIRE_CONAN_LIBS "google_benchmark/1.5.0@onebaseroach/stable")
        list(APPEND ERASURE_LINK_CONAN_LIBS "CONAN_PKG::google_benchmark")
        if(WIN32 OR MSYS OR MINGW)
            target_link_libraries(ErasureBenchmarks PUBLIC "shlwapi.lib")
        endif()
    endif()

    if(BUILD_FROM_SOURCE)
        conan_cmake_run(REQUIRES ${ERASURE_REQUIRE_CONAN_LIBS}
                        BUILD ${BUILD_FROM_SOURCE}
                        BASIC_SETUP CMAKE_TARGETS)
    else()
        conan_cmake_run(REQUIRES ${ERASURE_REQUIRE_CONAN_LIBS}
                BASIC_SETUP CMAKE_TARGETS)
    endif()
    foreach(CONAN_LIB " ${ERASURE_LINK_CONAN_LIBS}")
        string(REGEX REPLACE " " "" CONAN_LIB "${CONAN_LIB}")
        target_link_libraries(ErasureBenchmarks PUBLIC ${CONAN_LIB})
    endforeach()
endif()